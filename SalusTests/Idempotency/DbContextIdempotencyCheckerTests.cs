using Microsoft.EntityFrameworkCore;
using Moq;
using Salus;
using Salus.Exceptions;
using Salus.Idempotency;
using Salus.Messaging;
using Salus.Saving;
using SalusTests.TestDataStructures.Contexts;

namespace SalusTests.Idempotency;

public class DbContextIdempotencyCheckerTests
{
    private SalusCore BuildSalus(SalusOptions? options = null)
    {
        options = options ?? new SalusOptions();

        var checker = new DbContextIdempotencyChecker();
        var saver = new DbContextSaver();
        var messageSender = new MessageSender(options);
        return new SalusCore(checker, saver, messageSender);
    }


    [Fact]
    public void DatabaseGeneratedKeyAnnotationTest()
    {
        var salus = Helpers.BuildTestSalus();

        var options = new DbContextOptionsBuilder<DatabaseGeneratedKeyAnnotationContext>()
            .UseSqlite("Filename=:memory:")
            .Options;

        var context = new DatabaseGeneratedKeyAnnotationContext(salus, options);
        
        var exception = Assert.Throws<AutoGeneratedKeyException>(context.Database.Migrate);
        Assert.Equal("Type DatabaseGeneratedKeyAnnotationEntity has a key property Id which is auto-generated - that is not allowed because it prevents inserts from being idempotent", exception.Message);
    }

    [Fact]
    public void DatabaseGeneratedKeyFluentTest()
    {
        var salus = Helpers.BuildTestSalus();

        var options = new DbContextOptionsBuilder<DatabaseGeneratedKeyFluentContext>()
            .UseSqlite("Filename=:memory:")
            .Options;

        var context = new DatabaseGeneratedKeyFluentContext(salus, options);

        var exception = Assert.Throws<AutoGeneratedKeyException>(context.Database.Migrate);
        Assert.Equal("Type NoKeyAnnotationIntIdEntity has a key property Id which is auto-generated - that is not allowed because it prevents inserts from being idempotent", exception.Message);
    }

    [Fact]
    public void DatabaseGeneratedKeyImplicitTest()
    {
        var salus = Helpers.BuildTestSalus();

        var options = new DbContextOptionsBuilder<DatabaseGeneratedKeyImplicitContext>()
            .UseSqlite("Filename=:memory:")
            .Options;

        var context = new DatabaseGeneratedKeyImplicitContext(salus, options);

        var exception = Assert.Throws<AutoGeneratedKeyException>(context.Database.Migrate);
        Assert.Equal("Type NoKeyAnnotationIntIdEntity has a key property Id which is auto-generated - that is not allowed because it prevents inserts from being idempotent", exception.Message);
    }

    [Fact]
    public void NonGeneratedKeyTest()
    {
        var salus = Helpers.BuildTestSalus();

        var options = new DbContextOptionsBuilder<NonGeneratedKeyContext>()
            .UseSqlite("Filename=:memory:")
            .Options;

        var context = new NonGeneratedKeyContext(salus, options);

        context.Database.Migrate();
        // Test passes if no exceptions are thrown
    }


    [Fact]
    public void NoKeyTest()
    {
        var salus = Helpers.BuildTestSalus();

        var options = new DbContextOptionsBuilder<NoKeyContext>()
            .UseSqlite("Filename=:memory:")
            .Options;

        var context = new NoKeyContext(salus, options);

        var exception = Assert.Throws<NoKeyException>(context.Database.Migrate);
        Assert.Equal("Type NoKeyAnnotationIntIdEntity does not have a key - a key is required for data to be updated or deleted", exception.Message);
    }

    [Fact]
    public void NonSalusEntityTest()
    {
        var salus = Helpers.BuildTestSalus();

        var options = new DbContextOptionsBuilder<NonSalusEntityContext>()
            .UseSqlite("Filename=:memory:")
            .Options;

        var context = new NonSalusEntityContext(salus, options);

        context.Database.Migrate();
        // Test passes if no exceptions are thrown
    }
}
